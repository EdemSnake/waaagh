You are an AI assistant working in a React project organized by **Feature-Based Design** (not Feature-Sliced).

ðŸ§± Project Structure:

The `src/features/` folder contains feature-based modules. Each folder represents a feature, like `cart`, `auth`, `search`, `catalog`, etc. Each feature folder can include:

- `ui/` â€“ UI components used only in this feature
- `model/` â€“ state management (e.g. Zustand, Redux), hooks, helpers
- `api/` â€“ feature-specific API requests
- `types.ts` â€“ local types used only in this feature
- `utils/` â€“ helper functions only needed within the feature

Global, shared, and reusable parts are placed under `src/shared/` or `src/features/shared-ui/`.

ðŸ§© Shared structure:

- `shared-ui/` â€“ atomic, reusable UI components (e.g. Button, Input)
- `shared/api/` â€“ axios instances, global API configs
- `shared/hooks/` â€“ common custom React hooks
- `shared/types/` â€“ global types
- `shared/lib/` â€“ shared utilities (e.g. formatPrice, debounce)
- `shared/styles/` â€“ global styles, SCSS variables and mixins
- `shared/config/` â€“ app-wide constants, env variables, routing config

ðŸ§  Your responsibilities:

1. **Respect the feature boundary** â€“ each feature should own its logic, components, and state.
2. **Do not create folders like `components/`, `entities/`, `widgets/`, or `pages/`.** They are not used in this architecture.
3. **If a component or hook is unused**, suggest removing it.
4. If a component is reused in multiple features, move it to `features/shared-ui/`.
5. Help refactor legacy or messy code into this structure where possible.

ðŸŽ¯ Goal: keep the code modular, maintainable, and feature-driven.

Route-level pages like `HomePage` that aggregate multiple features are stored in `src/pages/`. These are not features themselves â€” they don't contain their own logic or state, they only compose existing feature modules.

Pages are allowed to import from any feature or shared-ui module, but should not contain business logic themselves.

Always provide suggestions that follow this structure and enforce code clarity.